<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>indicLP</title>
    <link>https://aakash-ez.github.io/indicLP-docs/</link>
    <description>Recent content on indicLP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Oct 2021 00:01:00 +0100</lastBuildDate><atom:link href="https://aakash-ez.github.io/indicLP-docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tokenizing Sentences</title>
      <link>https://aakash-ez.github.io/indicLP-docs/blog/tokenizer/</link>
      <pubDate>Fri, 29 Oct 2021 00:00:00 +0100</pubDate>
      
      <guid>https://aakash-ez.github.io/indicLP-docs/blog/tokenizer/</guid>
      <description>Getting Started with indicLP IndicLP (Indic Language Processing) Library has been developed to act as a complete toolkit for programmers and researchers who are working on NLP projects in Indic Languages. Therefore, one of the most necessary functionalities that it supports is tokenization. Let us first consider what tokenization is, stanford NLP defines tokenization as:
 Given a character sequence and a defined document unit, tokenization is the task of chopping it up into pieces, called tokens , perhaps at the same time throwing away certain characters, such as punctuation.</description>
    </item>
    
    <item>
      <title>Quick Start</title>
      <link>https://aakash-ez.github.io/indicLP-docs/docs/quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://aakash-ez.github.io/indicLP-docs/docs/quick-start/</guid>
      <description>InstallationindicLP is an easy to install library, making itself available through pip for all python users, while also providing github repository for direct cloning.
 Installation through pip packagepip install indicLPPrerequisite LibrariesindicLP requires the following libraries for comfortable execution:
torchtextsnowballstemmerindic_transliterationgensimpickletarfile</description>
    </item>
    
    <item>
      <title>Word Embedding</title>
      <link>https://aakash-ez.github.io/indicLP-docs/blog/word-embedding/</link>
      <pubDate>Fri, 29 Oct 2021 00:00:00 +0100</pubDate>
      
      <guid>https://aakash-ez.github.io/indicLP-docs/blog/word-embedding/</guid>
      <description>Getting Started Word Embedding has become one of the most crucial aspect of NLP tasks, as it helps in representing the meaning of words in a way computer can understand. Let us first consider the definition of Word Embedding, provided by Stanford&amp;rsquo;s RCpedia:
 Word Embeddings are a method to translate a string of text into an N-dimensional vector of real numbers. Many computational methods are not capable of accepting text as input.</description>
    </item>
    
    <item>
      <title>Transliteration in indicLP</title>
      <link>https://aakash-ez.github.io/indicLP-docs/blog/transliteration/</link>
      <pubDate>Fri, 29 Oct 2021 00:01:00 +0100</pubDate>
      
      <guid>https://aakash-ez.github.io/indicLP-docs/blog/transliteration/</guid>
      <description>Getting Started Transliteration is a topic that&amp;rsquo;s not often brought up in NLP tasks as more often than not we are dealing with corpus that contain latin text, thus making it standard. However this is not the case when deal with Indic Languages as more often than not we can have text from various scripts in our corpus. These could english translation of some words, quotes from other languages etc.</description>
    </item>
    
  </channel>
</rss>
